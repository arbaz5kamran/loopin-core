# LoopIn Environment Configuration
# Copy this file to .env and update with your actual values

# ================================
# DATABASE CONFIGURATION
# ================================

# Production Database (Required)
DATABASE_URL=postgresql://username:password@localhost:5432/loopin

# Test Database (Optional - prevents tests from touching production data)
# If not set, tests will use SQLite fallback: sqlite:///test_loopin.db
TEST_DATABASE_URL=postgresql://username:password@localhost:5432/loopin_test

# PostgreSQL SSL Mode (Optional)
PG_SSLMODE=require

# ================================
# FLASK CONFIGURATION
# ================================

# Flask Secret Key (Required - change this!)
FLASK_SECRET_KEY=your-super-secret-key-change-this-in-production

# Environment Mode
# Options: production, development, testing
FLASK_ENV=production

# Testing Mode (Set to 'true' when running tests)
TESTING=false

# Flask Debug Mode (Set to 'true' for development)
FLASK_DEBUG=false

# Server Port (Optional, defaults to 8000)
PORT=8000

# ================================
# TESTING CONFIGURATION
# ================================

# To run tests safely without touching production data:
# 1. Set TESTING=true OR FLASK_ENV=testing
# 2. Ensure TEST_DATABASE_URL points to a separate test database
# 3. Run your tests: python -m pytest

# Example test environment:
# FLASK_ENV=testing
# TESTING=true
# TEST_DATABASE_URL=postgresql://username:password@localhost:5432/loopin_test

# ================================
# BACKUP CONFIGURATION
# ================================

# Backup system will automatically use:
# - Production database when TESTING=false
# - Test database when TESTING=true
# - Separate backup directories for each environment

# ================================
# RAILWAY DEPLOYMENT NOTES
# ================================

# For Railway deployment:
# 1. Railway automatically provides DATABASE_URL for PostgreSQL
# 2. Set PORT environment variable (Railway provides this automatically)
# 3. Set FLASK_SECRET_KEY to a secure random string
# 4. Set FLASK_ENV=production
# 5. Optional: Add REDIS_URL if using Redis add-on

# Railway will automatically:
# - Run database migrations on deploy
# - Set PORT environment variable
# - Provide DATABASE_URL for attached PostgreSQL service

# ================================
# SECURITY NOTES
# ================================

# 1. Never commit .env file to version control
# 2. Use strong, unique passwords for database connections
# 3. Change FLASK_SECRET_KEY to a random string in production
# 4. Use SSL/TLS for database connections in production
# 5. Regularly rotate secrets and passwords
