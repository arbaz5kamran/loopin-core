"""Recreate users with integer ID

Revision ID: 034bd85c9b44
Revises: 367db610ad2f
Create Date: 2025-08-02 02:42:53.972572

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '034bd85c9b44'
down_revision = '367db610ad2f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - adjusted ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        # Drop old primary key column 'id' (varchar) and recreate as integer autoincrement PK
        batch_op.drop_column('id')
        batch_op.add_column(sa.Column('id', sa.Integer(), primary_key=True, autoincrement=True))

        # Add username and enforce uniqueness
        batch_op.add_column(sa.Column('username', sa.String(length=50), nullable=False))
        # Change password_hash length if needed
        batch_op.alter_column(
            'password_hash',
            existing_type=sa.VARCHAR(length=255),
            type_=sa.String(length=128),
            existing_nullable=False
        )
        # Replace unique constraint on old 'name' with new on 'username'
        try:
            batch_op.drop_constraint(batch_op.f('users_name_key'), type_='unique')
        except Exception:
            # If the constraint name differs or doesn't exist, ignore
            pass
        batch_op.create_unique_constraint(None, ['username'])

        # Drop legacy 'name' column
        batch_op.drop_column('name')
    # ### end adjusted commands ###


def downgrade():
    # ### revert changes ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        # Add back name
        batch_op.add_column(sa.Column('name', sa.VARCHAR(length=100), nullable=False))

        # Drop unique constraint on username and restore unique on name
        try:
            batch_op.drop_constraint(None, type_='unique')  # drops the username unique constraint
        except Exception:
            pass
        batch_op.create_unique_constraint(batch_op.f('users_name_key'), ['name'], postgresql_nulls_not_distinct=False)

        # Revert password_hash type
        batch_op.alter_column(
            'password_hash',
            existing_type=sa.String(length=128),
            type_=sa.VARCHAR(length=255),
            existing_nullable=False
        )

        # Drop integer id and recreate varchar(36) id (not auto-incrementing)
        batch_op.drop_column('id')
        batch_op.add_column(sa.Column('id', sa.VARCHAR(length=36), primary_key=True, nullable=False))
        
        # Drop username
        batch_op.drop_column('username')
    # ### end revert ###
