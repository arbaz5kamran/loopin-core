services:
  # Web service
  - type: web
    name: loopin-core
    env: python
    buildCommand: pip install -r requirements.txt
    startCommand: gunicorn app:app --config gunicorn.conf.py
    healthCheckPath: /health
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.0
      - key: FLASK_ENV
        value: production
      - key: FLASK_APP
        value: app.py
      # Database configuration
      - key: DATABASE_URL
        fromDatabase:
          name: loopin-db
          property: connectionString
      # Secret key from environment group
      - key: FLASK_SECRET_KEY
        sync: false
    autoDeploy: true
    scaling:
      minInstances: 1
      maxInstances: 3
      targetMemoryPercent: 80
      targetCPUPercent: 80
    headers:
      - path: /*
        name: X-Frame-Options
        value: DENY
      - path: /*
        name: X-XSS-Protection
        value: 1; mode=block
      - path: /*
        name: X-Content-Type-Options
        value: nosniff
    routes:
      - type: rewrite
        source: /*
        destination: /
    # Disk configuration
    disk:
      name: data
      mountPath: /data
      sizeGB: 1
    # Custom domain configuration (uncomment and modify as needed)
    # domains:
    #   - domain: your-domain.com
    #     type: PRIMARY
    #   - domain: www.your-domain.com
    #     type: REDIRECT

  # Database service
  - type: pserv
    name: loopin-db
    env: postgres
    plan: standard
    ipAllowList: []  # Only allow internal connections
    disk:
      name: data
      mountPath: /var/lib/postgresql/data
      sizeGB: 10

# Global environment group
envVarGroups:
  - name: loopin-production
    envVars:
      - key: WTF_CSRF_SECRET_KEY
        generateValue: true
      - key: SESSION_COOKIE_SECURE
        value: "True"
      - key: SESSION_COOKIE_HTTPONLY
        value: "True"
      - key: REMEMBER_COOKIE_SECURE
        value: "True"
      - key: REMEMBER_COOKIE_HTTPONLY
        value: "True"
      - key: MAX_CONTENT_LENGTH
        value: "16777216"  # 16MB in bytes

# Cron jobs for maintenance tasks
cron:
  - name: database-backup
    schedule: "0 */6 * * *"  # Every 6 hours
    command: python scheduled_backup.py
    envVars:
      - key: BACKUP_TYPE
        value: scheduled
